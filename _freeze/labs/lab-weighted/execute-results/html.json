{
  "hash": "8844295bbb0c09407da7776e09d90ce1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"(Mini) Lab: Weighted Regression\"\nauthor: \"Chris Slaughter\"\nname: labs/lab-weighted.qmd\ntoc: true\n---\n\n\n\n\n\n## Preliminary\n\n### Goals\n\n1. Implement weighted regression (using inverse variance weights) in R.  Compare the unweighted, weighted estimates.  Also compare the standard error estimates.\n\n2. Demonstrate how R does not handle frequency weights appropriately using the weights option.\n\n\n### Packages\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(sandwich)\nlibrary(lmtest)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: zoo\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'zoo'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n```\n\n\n:::\n:::\n\n\n\n\n### Data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfev <- read.table(\"http://www.emersonstatistics.com/Datasets/fev.txt\", header = TRUE)\nfev$ht3 <- fev$height^3/1E5\n```\n:::\n\n\n\n\n## Descriptive plots\n\n### FEV and height\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(fev, aes(y=fev, x=height)) + geom_point() + geom_smooth(method=\"lm\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](lab-weighted_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n### FEV and height cubed\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(fev, aes(y=fev, x=ht3)) + geom_point() + geom_smooth(method=\"lm\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](lab-weighted_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n## Linear regression results\n\n### Unweighted, classical and sandwich\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm1 <- lm(fev ~ ht3, data=fev)\ncoeftest(m1) # Classical std error\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nt test of coefficients:\n\n             Estimate Std. Error t value  Pr(>|t|)    \n(Intercept) -0.174112   0.061955 -2.8103  0.005098 ** \nht3          1.198644   0.025501 47.0047 < 2.2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n```{.r .cell-code}\ncoeftest(m1, vcov=sandwich) # Sandwich estimator\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nt test of coefficients:\n\n             Estimate Std. Error t value  Pr(>|t|)    \n(Intercept) -0.174112   0.062434 -2.7888  0.005445 ** \nht3          1.198644   0.029889 40.1038 < 2.2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfev$wts <- 1/(fev$ht3)^2\nm2 <- lm(fev ~ ht3, weights=wts, data=fev)\ncoeftest(m2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nt test of coefficients:\n\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -0.078921   0.045783 -1.7238  0.08522 .  \nht3          1.156422   0.022137 52.2393  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n```{.r .cell-code}\ncoeftest(m2, vcov=sandwich)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nt test of coefficients:\n\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -0.078921   0.049714 -1.5875   0.1129    \nht3          1.156422   0.024179 47.8271   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n\n\n### Comparison of standard errors\n\n|                         |            |          |\n|-------------------------|------------|----------|\n|                         | Unweighted | Weighted |\n| Classical (model based) | 0.0255     | 0.0221   |\n| Robust                  | 0.0299     | 0.0242   |\n\n## Note on Frequency weights in R\n\nNote that R does frequency (replication) weights incorrectly. The simplest answer as to why this is the case is that frequency weights are not very useful in practice and require different methodology to implement. See the Details of the help(lm) for details on the problem. In the example below, the standard errors are not the same.\n\nIf you look closely at the output below, the estimate and the standard error of height from m3 (all weights set to 2) is the same as m1 above (unweighted, which implicitly is all weights set to 1). R is almost certainly standardizing the weights so that they sum to one. That is, in m1, every observation gets weight of $1/n$; In m3, every observation gets a weight of $2/2n=1/n$.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# For simplicity, just say every observation observed twice\nfev$freqwts <- rep(2, nrow(fev))\n\nm3 <- lm(fev ~ ht3, data=fev, weights=freqwts)\ncoeftest(m3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nt test of coefficients:\n\n             Estimate Std. Error t value  Pr(>|t|)    \n(Intercept) -0.174112   0.061955 -2.8103  0.005098 ** \nht3          1.198644   0.025501 47.0047 < 2.2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n```{.r .cell-code}\ncoeftest(m3, vcov=sandwich)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nt test of coefficients:\n\n             Estimate Std. Error t value  Pr(>|t|)    \n(Intercept) -0.174112   0.062434 -2.7888  0.005445 ** \nht3          1.198644   0.029889 40.1038 < 2.2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n```{.r .cell-code}\nfev.big <- rbind(fev,fev)\nm4 <- lm(fev ~ ht3, data=fev.big)\ncoeftest(m4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nt test of coefficients:\n\n             Estimate Std. Error t value  Pr(>|t|)    \n(Intercept) -0.174112   0.043775 -3.9774 7.349e-05 ***\nht3          1.198644   0.018018 66.5257 < 2.2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n```{.r .cell-code}\ncoeftest(m4, vcov=sandwich)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nt test of coefficients:\n\n             Estimate Std. Error t value  Pr(>|t|)    \n(Intercept) -0.174112   0.044147 -3.9439 8.442e-05 ***\nht3          1.198644   0.021134 56.7154 < 2.2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n\n\nm4 gives the correct results for the frequency weights. By doubling the sample size, we have decreased the standard errors of beta0 and beta1 by (about) the square root of 2.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(diag(vcov(m1)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(Intercept)         ht3 \n 0.06195478  0.02550051 \n```\n\n\n:::\n\n```{.r .cell-code}\nsqrt(diag(vcov(m4)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(Intercept)         ht3 \n 0.04377509  0.01801777 \n```\n\n\n:::\n\n```{.r .cell-code}\nsqrt(diag(vcov(m1))) / sqrt(diag(vcov(m4)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(Intercept)         ht3 \n   1.415298    1.415298 \n```\n\n\n:::\n\n```{.r .cell-code}\nsqrt(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.414214\n```\n\n\n:::\n:::\n",
    "supporting": [
      "lab-weighted_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}